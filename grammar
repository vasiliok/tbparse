WP: " " | "\t" | "\n"
%ignore WP
DIGIT           : "0".."9"
LCASE_LETTER    : "a".."z"
UCASE_LETTER    : "A".."Z"
SP: " "


//[3]
LETTER_DIGIT: LCASE_LETTER | UCASE_LETTER | DIGIT | "_"

standard_identifier: LETTER_DIGIT+

identifier: standard_identifier
//[2]



//[146]   
field_reference: [ field_qualifier "." ] field_identifier

//[147]   
field_qualifier: table_identifier | view_identifier | correlation_identifier

//[7] 
user_identifier: identifier | "PUBLIC" | "USER"

//[8] 
schema_identifier: user_identifier

// [10]    
sequence_identifier: [ schema_identifier "." ] identifier

//[11]    
table_identifier: [ schema_identifier "." ] identifier

//[12]    
view_identifier: [ schema_identifier "." ] identifier

//[15]    
field_identifier: identifier

//[17]    
correlation_identifier: identifier

//[18]    
data_type: "TINYINT" | "SMALLINT" | "INTEGER" | "BIGINT"
    | "NUMERIC" ["("precision ["," scale]")"] 
    | "DECIMAL" ["("precision ["," scale] ")"] 
    | "FLOAT" | "DOUBLE" | "REAL" 
    | "VARCHAR" [ "(" precision ")" ] | "CHAR" [ "(" precision ")" ] 
    | "VARCHAR(*)" | "CHAR(*)" | "STRING" 
    | "BINCHAR" [ "(" precision ")" ] | "BINCHAR(*)" 
    | "BITS (" precision ")" | "BITS (*)" 
    | "BITS2 (" precision ")" | "BITS2 (*)" 
    | "BOOL" 
    | "DATETIME" range | "DATE" | "TIME" | "TIMESTAMP" 
    | "TIMESPAN" range 
    | "INTERVAL" start_ix2 [ "TO" end_ix2 ] 
    | "BLOB" | "CLOB"

//[19]    
precision: INTEGERLITERAL   
//[20]    
scale: INTEGERLITERAL
//[21]    
range: LEFTBR RANGEIX1 [ ":" RANGEIX1 ] RIGHTBR   
//[22]    
LEFTBR: "["
//[23]    
RIGHTBR: "]"

//[24]    
RANGEIX1: "YY" | "MO" | "DD" | "HH" | "MI" | "SS" | "MS"
//[25]    

start_ix2: RANGEIX2 [ precision ]
//[26]    
end_ix2: RANGEIX2 [ precision ]   

//[27]    
RANGEIX2: "YEAR" | "MONTH" | "DAY" | "HOUR" | "MINUTE" | "SECOND"

//[28]    
literal: INTEGERLITERAL 
         | numeric_literal 
         | real_literal 
         | string_literal 
         //| BinaryLiteral 
         //| BitsLiteral 
         //| BoolLiteral 
         //| DatetimeLiteral 
         //| TimespanLiteral 
         //| DirectoryLiteral 
         //| FileLiteral

//31
INTEGERLITERAL: "0" | "1".."9"("0".."9")*

//[32]    
numeric_literal: INTEGERLITERAL "." [ INTEGERLITERAL ] | "." INTEGERLITERAL

//[33]    
real_literal: (INTEGERLITERAL | numeric_literal) ("e" | "E") [ "+" | "-" ] INTEGERLITERAL

//[34]    

string_literal: character_literal | unicode_literal //| USER     
//[35]    
character_literal: "'" (LETTER_DIGIT | SP )+ "'"
//[36]    
unicode_literal: "0u" LETTER_DIGIT+

//[98]
field_list: field_identifier ("," field_identifier)*


//[148]   
expression: [UNARY] primary (BINARY [UNARY] primary)*
//[149]   
UNARY: "+" | "-" | "BITNOT"
//[150]   
BINARY: "+" | "-" | "*" | "/" | "BITAND" | "BITOR" | "||"

//[152]   
primary: simple_primary

// [154]

simple_primary: literal 
                | field_reference 
                | parameter 
                | "(" expression ")" 
                | "(" sub_table_expression ")" 
                | set_function 
                | conditional_expression 
                | string_function 
                | sign_function 
                | resultcount_expression 
                | sequence_expression 
                | function_call
// | ODBC_FunctionCall
//  | last_insert_id_func
//| last_update_func
//    | user 
//| replication_status_func
//| time_expression 
//| size_expression 
// | lob_expression 

//[155]   
parameter: "#" INTEGERLITERAL ( data_type ) 
        | COLON standard_identifier
        | QUESTIONMARK
//[156]   
COLON: ":"

//[157]   
QUESTIONMARK: "?"
//[158]   
set_function: "COUNT" "(" "*" ")" | distinct_function | all_function     
//[159]   
distinct_function: ( "AVG" | "COUNT" | "MAX" | "MIN" | "SUM" ) "(" "DISTINCT" expression ")"
//[160]   
all_function: ( "AVG" | "MAX" | "MIN" | "SUM" ) "(" ["ALL"] expression ")"


//[170]   
string_function: position_function
               | substring_function

//[171]
position_function: "POSITION" "(" expression "IN" expression ")"


//[182]   
substring_function: "SUBSTRING" "(" source "FROM" startpos [ "FOR" length ] ")" 
                    | "SUBSTR" "(" source "," startpos ["," length ] ")"

//[191]   
sign_function: "SIGN" "(" expression ")"
// [192]   
resultcount_expression: "RESULTCOUNT"

//[193]   
sequence_expression: sequence_identifier "." "NEXTVAL" | sequence_identifier "." "CURRVAL"

//[194]   

conditional_expression: if_expression
//                        | CaseExpression 
//                        | DecodeExpression 
//                        | CoalesceExpression 
//                        | NvlExpression 
//                        | NullifExpression

//[195]   
if_expression: "IF" search_condition "THEN" expression "ELSE" expression "FI"

//[230]   
function_identifier: identifier

//[233]   
function_call: function_identifier "(" expression_list ")"    

//[251]   
expression_list: expression ("," expression)*


//[227]   
startpos: expression   

//[228]
length: expression

search_condition: [ "NOT" ] predicate ( BOOLOP ["NOT"] predicate )*
BOOLOP: "AND" | "OR"

predicate: "(" search_condition ")" 
            | comparison_predicate 
            | between_predicate 
            | like_predicate 
            | matches_predicate 
            | exists_predicate 
            | quantified_predicate 
            //| null_predicate | fulltext_predicate

//[244]   
comparison_predicate: value_comp_predicate | set_comp_predicate | in_predicate

//[245]   
value_comp_predicate: expression VALCOMPOP expression

//[246]   
VALCOMPOP: "<" | "<=" | "=" | "<>" | ">" | ">="

//[247]   
set_comp_predicate: sub_table_expression SETCOMPOP sub_table_expression 

//[248]   
SETCOMPOP: ["NOT"] "SUBSET" ["OF"] | "=" | "<>"

//[249]   
in_predicate: value_in_predicate | record_in_predicate

//[250]   
value_in_predicate: expression ["NOT"] "IN" ( "(" expression_list ")" | "(" sub_table_expression ")" )

//[252]   
record_in_predicate: record ["NOT"] "IN" (sub_table_expression)     

//[253]   
record: "(" expression_list ")"

//[254]   
between_predicate: expression ["NOT"] "BETWEEN" expression [ BETWEEN_QUALIFIER ] "AND" expression [ BETWEEN_QUALIFIER ]

//[255]   
BETWEEN_QUALIFIER: "INCLUSIVE" | "EXCLUSIVE"

//[256]   
like_predicate: expression ["NOT"] "LIKE" SENSSPEC pattern [ "ESCAPE" escape_char ]

//[257]   
SENSSPEC: "SENSITIVE" | "INSENSITIVE"
//[258]   

pattern: expression
//[259]   
escape_char: expression

//[260]   
matches_predicate: expression ["NOT"] "MATCHES" SENSSPEC reg_pattern [ "ESCAPE" escape_char ]

//[261]   
reg_pattern: expression

//[262]   
exists_predicate: "EXISTS (" sub_table_expression ")"

//[263]   
quantified_predicate: expression VALCOMPOP QUANTIFIER "(" sub_table_expression ")"

//[264]   
QUANTIFIER: "ALL" | "ANY" | "SOME"

// 280
select_expression: select_clause [ from_clause [ where_clause ] [ group_clause ] ]

select_clause: "SELECT" ([ "ALL" | "DISTINCT" ])* select_list
 
from_clause: "FROM" table_reference ("," table_reference)*
 
where_clause: "WHERE" search_condition
 
group_clause: "GROUP BY" expression ("," expression)*
 
select_list: select_elem ( "," select_elem )*
select_elem: expression [ "AS" field_identifier ]
             | (correlation_identifier ".")*

table_expression: table_term [ unidiff_spec table_term ]

sub_table_expression: sub_table_term [ unidiff_spec sub_table_term ]

table_term: table_reference [ intersect_spec table_reference ]
sub_table_term: sub_table_reference [ intersect_spec sub_table_reference ]

unidiff_spec: UNIDIFF_OP [ corresponding_spec ]
UNIDIFF_OP:	"UNION" ["ALL"] | "DIFF" | "EXCEPT"
intersect_spec: "INTERSECT" [ corresponding_spec ]
corresponding_spec : "CORRESPONDING" [ "BY" ( field_list ) ]

table_reference: [ "TABLE" ] table_spec [ ["AS"] "Alias" ]
               | "FUNCTION" table_function
               | select_expression
               | ( table_expression ) [ ["AS"] "Alias" ]
               | joined_table
               //| FULLTEXT <special_fulltext_table>
               //| flat_file_reference

sub_table_reference: select_expression
                   | ( sub_table_expression )

table_spec: local_table_spec
          | remote_table_spec

local_table_spec: table_identifier  

//[305]
remote_table_spec: table_identifier "@" connection_identifier

//[306]   
connection_identifier: identifier

//[307]
alias: [ correlation_identifier ] [ "(" field_list ")" ]  



//[315]   
joined_table: table_reference "CROSS JOIN" table_reference 
        | table_reference "UNION JOIN" table_reference 
        | table_reference "NATURAL" [ JOINTYPE ] "JOIN" table_reference 
        | table_reference [ JOINTYPE ] "JOIN" table_reference [ joinpred ] 
        | "(" joined_table ")"

JOINTYPE: "INNER" | ( "LEFT" | "RIGHT" | "FULL" ) [ "OUTER" ]


// [317]   
joinpred: "ON" search_condition | "USING (" field_list ")"



//[308]   

table_function: function_identifier "(" expression_list ")"



//[318]

select_statement: table_expression [sort_spec]
sort_spec: "ORDER BY ALL"
         | "ORDER BY" sort_elem ("," sort_elem)*
sort_elem: (field_identifier | INTEGERLITERAL) [ "ASC" | "DESC" ]


//[325]   
source: "VALUES" "(" value_list ")" 
        | "TABLE" "(" "(" value_list ")" ( "," "(" value_list ")" )* ")" 
        | table_expression 
        | "DEFAULT VALUES"

//[326]   
value_list: expression ("," expression )*

//[327]   
returning_clause: "RETURNING" "(" expression_list ")"




